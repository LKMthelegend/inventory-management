import axios from "axios";
import { useEffect, useState } from "react";
import Header from "../../components/Header";
import { FaSearch } from "react-icons/fa";
import { MdOutlineAddCircle, MdDelete, MdEdit } from "react-icons/md";
import Swal from "sweetalert2";
import AddEmployee from "./AddEmploye";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function Employe() {
  const [employes, setEmployes] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const fetchData = async () => {
    try {
      const response = await axios.get(`http://localhost:8080/users`);
      const employesData = response.data;
      console.log("employé:", employesData)

      const uniqueDepartments = Array.from(
        new Set(
          employesData
            .filter((employe) => employe.department)
            .map((employe) => employe.department)
        )
      );
      setDepartments(uniqueDepartments);
      console.log("departement:", departments);

      const serviceResponses = await Promise.all(
        employesData.map(async (employe) => {
          if (employe.department) {
            try {
              return await axios.get(`http://localhost:8080/departments/${employe.department._id}`);
            } catch (error) {
              console.error(`Erreur lors de la récupération du département pour l'employé ${employe._id}`, error);
              throw error;
            }
          } else {
            console.warn(`Department is undefined for employee ${employe._id}. Skipping.`);
            return null;
          }
        })
      );

      const employesWithService = employesData.map((employe, index) => {
        const serviceResponse = serviceResponses[index];

        if (serviceResponse && serviceResponse.data) {
          return {
            ...employe,
            department: serviceResponse.data.name,
            _id: employe._id || index.toString(),
          };
        } else {
          console.warn(`Department data is null for employee ${employe._id}. Skipping.`);
          return employe;
        }
      });

      setEmployes(employesWithService);
    } catch (error) {
      handleError(error, "Erreur lors de la récupération des employées");
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleError = (error, message) => {
    console.error(message, error);
  };

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
  };

  const filteredEmployes = employes.filter((employe) =>
    employe.username.toLowerCase().includes(searchQuery.toLowerCase()) || employe.email.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleDelete = async (employe) => {
    Swal.fire({
      title: `Etes vous sur de vouloir supprimer ${employe.username}?`,
      text: "Cette action est irreversible!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Oui, supprimer!',
      cancelButtonText: "Annuler",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await axios.delete(`http://localhost:8080/users/${employe._id}`);
          setEmployes(employes.filter((p) => p._id !== employe._id));
          fetchData();
          Swal.fire('Suppession efféctuée', 'avec succès!');
        } catch (error) {
          console.error("Erreur lors de la suppression de l'employé :", error);
          Swal.fire('Erreur lors de la suppression', 'Une erreur s\'est produite.', 'error');
        }
      }
    });
  };

//EDITER un employé
  const [services, setServices] = useState([]);
  

  const getAllServices = async () => {
    const res = await axios.get(`http://localhost:8080/departments`);
    setServices(res.data);
  };

  useEffect(() => {
    getAllServices();
  }, []);
const handleEdit = async (employe) => {
  try {
    
    const { value: formValues } = await Swal.fire({
      title: 'Modifier l\'employé',
      html: `<input id="swal-input1" class="swal2-input" value="${employe.username}">
            <input id="swal-input2" class="swal2-input" value="${employe.email}">
            <input id="swal-input3" class="swal2-input" value="${employe.telephone}">
            <input id="swal-input4" class="swal2-input" value="${employe.adress}">
            <select id="swal-input5" class="swal2-input">
              <option value="">Selectionner un service</option>
              ${services.map((department) => `
                <option value="${department._id}" ${employe.department === department ? 'selected' : ''}>
                  ${department.name}
                </option>
              `).join('')}
            </select>`,
      showCancelButton: true,
      confirmButtonText: 'Modifier',
      cancelButtonColor: '#d33',
      cancelButtonText: 'Annuler',
      focusConfirm: false,
      preConfirm: () => {
        return {
          username: document.getElementById('swal-input1').value,
          email: document.getElementById('swal-input2').value,
          telephone: document.getElementById('swal-input3').value,
          adress: document.getElementById('swal-input4').value,
          department: document.getElementById('swal-input5').value,
        };
      },
    });

    if (formValues && formValues.username && formValues.email && formValues.telephone && formValues.adress) {
      console.log('Données envoyées pour la mise à jour avant traitement:', formValues);

      // Afficher les noms de département disponibles dans `departments`
      console.log('Noms de département disponibles:', departments);
      try {
      const selectedDepartment = departments.find(dep => dep.name === formValues.department);
      console.log('Nom de département pour l\'employé actuel:', formValues.department);
      console.log('departement sélectionné :', selectedDepartment);
      if (selectedDepartment) {
        console.log('Département trouvé:', selectedDepartment);

      formValues.department = selectedDepartment._id;
      console.log('Données envoyées pour la mise à jour après traitement:', formValues);

      await axios.put(`http://localhost:8080/users/${employe._id}`, formValues);
      fetchData();
      Swal.fire('Mise à jour réussie', '', 'success');
    } else {
      console.warn('Department non trouvé');
      console.log('Noms de département disponibles:', departments);
      console.log('Nom de département pour l\'employé actuel:', formValues.department);

      Swal.fire('Erreur lors de la mise à jour', 'Département non trouvé.', 'error');
    }
      } catch (err){
        console.err(err);
      }


      formValues.department = formValues.department || null;
      console.log('Données envoyées pour la mise à jour après traitement:', formValues);

      await axios.put(`http://localhost:8080/users/${employe._id}`, formValues);
      fetchData();
      Swal.fire('Mise à jour réussie', '', 'success');
    } else {
      console.warn('Department non trouvé');
      console.log('Noms de département disponibles:', departments);
      console.log('Nom de département pour l\'employé actuel:', formValues.department);

      Swal.fire('Erreur lors de la mise à jour', 'Département non trouvé.', 'error');
    }
  } catch (error) {
    console.error("Erreur lors de la mise à jour de l'employé :", error);
  }
};

  const handleAddEmployee = async (formData) => {
    console.log("données récupérer :", formData)
    try {
      const response = await axios.post('http://localhost:8080/users', formData);
      console.log('Nouvel employé ajouté:', response.data);
      setShowModal(false);

      toast.success('Enregistrement réussi', {
        position: 'top-right',
        autoClose: 5000,
      });
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'employé :", error);
      toast.error('Une erreur s\'est produite lors de l\'ajout de l\'employé.', {
        position: 'top-right',
        autoClose: 3000,
      });
    }
  };

  return (
    <div>
      <Header title={"Listes des employés"} />
      <div className='pt-[25px] px-[25px] bg-[#f5f4f4]'>
        <div className='flex items-center justify-between rounded-[5px]'>
          <div className='flex items-center'>
            <input
              className='bg-[#ffffff] h-[40px] outline-none pl-[13px] w-[350px] rounded-[5px] placeholder:text-[14px] leading-[20px] font-normal'
              placeholder='Rechercher ...'
              value={searchQuery}
              onChange={handleSearchChange}
            />
            <div className='bg-[#1a1a1b] h-[40px] px-[14px] flex items-center justify-center cursor-pointer rounded-tr-[5px] rounded-br-[5px]'>
              <FaSearch color='white' />
            </div>
          </div>
          <div className='flex items-center justify-end gap-[15px] relative'>
            <button
              onClick={() => setShowModal(true)}
              className='bg-[#2fa50b] text-white h-[32px] rounded-[3px] flex items-center justify-center hover:bg-[#ffffff] hover:text-[#2fa50b] hover:border hover:border-black transition-all px-[30px] cursor-pointer'
              alt='Ajouter nouvelle région'
            >
              <MdOutlineAddCircle size={20} />
            </button>
          </div>
        </div>

        <table className="border border-gray-700 w-full text-left mt-5">
          <thead className='bg-[#161616] text-white'>
            <tr>
              <th className='capitalize px-3.5 py-2 cursor-pointer'>N°</th>
              <th className='capitalize px-3.5 py-2 cursor-pointer'>Nom</th>
              <th className='capitalize px-3.5 py-2'>Email</th>
              <th className='capitalize px-3.5 py-2'>Telephone</th>
              <th className='capitalize px-3.5 py-2'>Adresse</th>
              <th className='capitalize px-3.5 py-2'>Service</th>
              <th className='capitalize px-3.5 py-2'>Action</th>
            </tr>
          </thead>
          <tbody>
            {filteredEmployes.map((employe, i) => (
              <tr key={employe._id} className={i % 2 === 0 ? 'bg-gray-200' : 'bg-white'}>
                <td className='px-3.5 py-2'> {i + 1} </td>
                <td className='px-3.5 py-2'> {employe.username} </td>
                <td className='px-3.5 py-2'> {employe.email} </td>
                <td className='px-3.5 py-2'> {employe.telephone || 'Non défini'} </td>
                <td className='px-3.5 py-2'> {employe.adress || 'Non défini'} </td>
                <td className='px-3.5 py-2'> {employe.department || 'Non assigné'} </td>
                <td className='py-2'>
                  <span className='flex'>
                    <button
                      onClick={() => handleEdit(employe)}
                      className='flex justify-center items-center mx-2 px-3.5 text-blue-600'><MdEdit size={20} />
                    </button>
                    <button
                      onClick={() => handleDelete(employe)}
                      className='flex justify-center items-center mx-2 px-3.5 text-red-600'><MdDelete size={20} />
                    </button>
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <AddEmployee isVisible={showModal} onClose={() => setShowModal(false)} onAddEmployee={handleAddEmployee}/>
      <ToastContainer />
    </div>
  );
}
